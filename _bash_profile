# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Check for an interactive session
[ -z "$PS1" ] && return

#merged mkdir/cd
function mkcd() { [ -n "$1" ] && mkdir -p "$1" && cd "$1"; }

alias ls='ls --color=auto'
alias sl='sl -e'
alias tj="tmux new-session -t"
alias t="tmux attach"
alias v='vim'
alias ll='ls --color=auto -la'
alias l='ls --color=auto -la'
alias d='cd ~/development'
alias please='sudo'
alias sorry='sudo $( history -p "!!" )'
alias rootme='sudo /bin/bash -c "DIRCOLORS=${HOME}/.dircolors PATH=${PATH} bash --rcfile <(echo \"source $HOME/.bashrc\")"'

# Editor:
export EDITOR=vim
export PSQL_EDITOR='vim -c "set ft=sql"'

# Disable Ctrl-S
stty stop undef

# PATH changes
export PATH=$HOME/.local/bin:$HOME/bin:$PATH

# Get pretty ls colours
if [ -z $DIRCOLORS ]; then 
    DIRCOLORS=${HOME}/.dircolors
fi
eval `dircolors ${DIRCOLORS}`

# Colors, children! Behold!
DEFAULT="\[\e[0;0m\]"
PINK="\[\e[0;35m\]"
GREEN="\[\e[0;32m\]"
BLDGREEN="\[\e[1;32m\]"
YELLOW="\[\e[0;33m\]"
BLDCYAN="\[\e[1;36m\]"
BLDBLUE="\[\e[1;34m\]"
WHITEONGREEN="\[\e[42;1;37m\]"
RED="\[\e[0;31m\]"
BLDRED="\[\e[1;31m\]"
BLUE="\[\e[0;34m\]"

# Prompt
job_status="\`if [ \$? = 0 ]; then echo \[\e[32m\]:\)\[\e[0m\]; else echo \[\e[31m\]:\(\[\e[0m\]; fi\`"
CURRENTUSER=`whoami`
if [ "$CURRENTUSER" = "root" ]; then
    uhp_status="${RED}\u${GREEN}@\h ${BLUE}\w"
    prompt="${BLDRED}#"
else
    uhp_status="${DEFAULT}\u${GREEN}@\h ${BLUE}\w"
    prompt="${BLDGREEN}$"
fi
vcs_status="${PINK}\$(vcprompt)"
bgj_status="\[\033[1;37m\]\`if [ \$(jobs | wc -l | tr -d ' ') -gt 0 ]; then echo '[jobs:\j] \[\e[0m\]'; fi\`"
export PS1="${job_status} ${uhp_status} ${vcs_status}${bgj_status}\n${DEFAULT}${prompt}${DEFAULT} "

# Make ~/.bash_history unbounded in size (from: http://mywiki.wooledge.org/BashFAQ/088)
unset HISTFILESIZE
export HISTSIZE=10000
export PROMPT_COMMAND="history -a"

# Don't write lines starting with a space or repeat entries to the history
export HISTCONTROL=ignoredups:ignorespace

# When the shell exits, append to the history file instead of overwriting it
type shopt >/dev/null 2>&1 && shopt -s histappend

# functions for dynamic title renaming 
settitle() {  # change the title of the current window
  printf "\033k$1\033\\"
}

ssh() {  # set the title of the current window to the host we're sshing into
  settitle "@$( cut -d@ -f2 <<< $* )"
  command ssh "$@"
  settitle `basename $SHELL`
}

vim() {  # set the title of the current window to the file we're editing
  [[ ! -z "$1" ]] && settitle "%%$( basename $1 )"
  command vim "$@"
  settitle `basename $SHELL`
}

gac() { # requires TLX package to be installed, sets AWS auth env vars
  for i in "$( get-aws-creds "$@" --quiet)"; do
    grep -qi error <<< "${i}" && (echo "${i}"; exit 1)
    eval "${i}";
  done
}

meep() {
  frequency=${1}
  duration=${2}
  if [ -z "${frequency}" ]; then frequency=1000; fi
  if [ -z "${duration}" ]; then duration=300; fi
  ( \speaker-test --frequency ${frequency} --test sine >/dev/null 2>&1)&
  pid=$!
  \sleep 0.${duration}s
  \kill -9 $pid >/dev/null
  \sleep 0.01
} >/dev/null 2>&1

# start powerline-daemon if it is in $PATH and not already running
if hash powerline-daemon 2>/dev/null; then
    if [ -z "$( ps aux | grep powerline-daemon | grep -v grep )" ]; then
        powerline-daemon
    fi
fi

# Close Steam to system tray
export STEAM_FRAME_FORCE_CLOSE=1

# user literal quoting style with ls
QUOTING_STYLE=literal

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:/opt/idea-IC-181.4668.68/bin:$PATH"

# SSH Agent Setup
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    ssh-add $(find ~/.ssh -maxdepth 1 -type f -not -name "*pub" -name "*rsa*")
}

# Source SSH settings, if applicable

if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent >/dev/null 2>&1;
    }
else
    start_agent >/dev/null 2>&1;
fi


# Set xkeyboardmap 
if [ -f ~/.Xkbmap ]; then
    setxkbmap `cat ~/.Xkbmap` 2>/dev/null
fi

# map esc to grave/tilde 
$(which xmodmap >/dev/null 2>&1) && xmodmap -e "keycode 9 = grave asciitilde"

